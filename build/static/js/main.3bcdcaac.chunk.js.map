{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","react_default","a","createElement","className","style","marginTop","this","props","setup","punchline","class","href","onClick","window","location","reload","React","Component","App","state","joke","_this2","axios","get","then","x","setState","data","Fragment","src_Card","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAiBeA,mLAZP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBC,MAAO,CAAEC,UAAW,UACnDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcG,KAAKC,MAAMC,OACvCR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,8BAA8BG,KAAKC,MAAME,UAAtD,IAAiET,EAAAC,EAAAC,cAAA,KAAGQ,MAAM,8BAC1EV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,IAAID,MAAM,iBAAiBE,QAAS,WAAQC,OAAOC,SAASC,WAApE,UAAuFf,EAAAC,EAAAC,cAAA,KAAGQ,MAAM,8BARjGM,IAAMC,WCyBVC,6MAtBXC,MAAQ,CACNC,KAAM,uFAEY,IAAAC,EAAAf,KAEhBgB,IAAMC,IADE,sDAEPC,KAAK,SAACC,GACLJ,EAAKK,SAAS,CACZN,KAAMK,EAAEE,0CAKZ,OACI3B,EAAAC,EAAAC,cAACF,EAAAC,EAAM2B,SAAP,KACI5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAC2B,EAAD,CAAMrB,MAAOF,KAAKa,MAAMC,KAAKZ,MAAOC,UAAWH,KAAKa,MAAMC,KAAKX,qBAjBjEO,IAAMC,WCQJa,QACW,cAA7BjB,OAAOC,SAASiB,UAEe,UAA7BlB,OAAOC,SAASiB,UAEhBlB,OAAOC,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,KAAK,SAAAiB,GACjCA,EAAaC","file":"static/js/main.3bcdcaac.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Card extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card w-50 mx-auto\" style={{ marginTop: \"350px\" }}>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{this.props.setup}</h5>\r\n                    <p className=\"card-text font-weight-bold\">{this.props.punchline} <i class=\"far fa-grin-squint-tears\"></i></p>\r\n                    <a href=\"#\" class=\"btn btn-danger\" onClick={() => { window.location.reload() }}>Reload <i class=\"fas fa-sync-alt\"></i></a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\nimport axios from 'axios';\nimport Card from './Card';\n\nclass App extends React.Component {\n    state = { \n      joke: ''\n     }\n    componentDidMount() {\n      var url = 'https://safe-falls-22549.herokuapp.com/random_joke'\n        axios.get(url)\n        .then((x) => {\n          this.setState({\n            joke: x.data\n          })\n        })\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"container text-right py-5\">\n                    <Card setup={this.state.joke.setup} punchline={this.state.joke.punchline} />\n                </div>\n            </React.Fragment>\n        )\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}